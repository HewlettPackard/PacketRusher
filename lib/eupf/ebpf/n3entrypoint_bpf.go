// Code generated by bpf2go; DO NOT EDIT.

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadN3Entrypoint returns the embedded CollectionSpec for N3Entrypoint.
func LoadN3Entrypoint() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_N3EntrypointBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load N3Entrypoint: %w", err)
	}

	return spec, err
}

// LoadN3EntrypointObjects loads N3Entrypoint and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*N3EntrypointObjects
//	*N3EntrypointPrograms
//	*N3EntrypointMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadN3EntrypointObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadN3Entrypoint()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// N3EntrypointSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type N3EntrypointSpecs struct {
	N3EntrypointProgramSpecs
	N3EntrypointMapSpecs
}

// N3EntrypointSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type N3EntrypointProgramSpecs struct {
	UpfN3EntrypointFunc *ebpf.ProgramSpec `ebpf:"upf_n3_entrypoint_func"`
}

// N3EntrypointMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type N3EntrypointMapSpecs struct {
	UpfPipeline *ebpf.MapSpec `ebpf:"upf_pipeline"`
}

// N3EntrypointObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadN3EntrypointObjects or ebpf.CollectionSpec.LoadAndAssign.
type N3EntrypointObjects struct {
	N3EntrypointPrograms
	N3EntrypointMaps
}

func (o *N3EntrypointObjects) Close() error {
	return _N3EntrypointClose(
		&o.N3EntrypointPrograms,
		&o.N3EntrypointMaps,
	)
}

// N3EntrypointMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadN3EntrypointObjects or ebpf.CollectionSpec.LoadAndAssign.
type N3EntrypointMaps struct {
	UpfPipeline *ebpf.Map `ebpf:"upf_pipeline"`
}

func (m *N3EntrypointMaps) Close() error {
	return _N3EntrypointClose(
		m.UpfPipeline,
	)
}

// N3EntrypointPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadN3EntrypointObjects or ebpf.CollectionSpec.LoadAndAssign.
type N3EntrypointPrograms struct {
	UpfN3EntrypointFunc *ebpf.Program `ebpf:"upf_n3_entrypoint_func"`
}

func (p *N3EntrypointPrograms) Close() error {
	return _N3EntrypointClose(
		p.UpfN3EntrypointFunc,
	)
}

func _N3EntrypointClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed n3entrypoint_bpf.o
var _N3EntrypointBytes []byte
